# BRUTE FORCE APPROACH:
Code:

class Solution {
    public int largestRectangleArea(int[] heights) {
    int maxArea = 0;
    for (int i = 0; i < heights.length; i++) {
        int minHeight = Integer.MAX_VALUE;
        for (int j = i; j < heights.length; j++) {
            minHeight = Math.min(minHeight, heights[j]);
            maxArea = Math.max(maxArea, minHeight * (j - i + 1));
        }
    }
    return maxArea;
    }
}

# OPTIMAL APPROACH:
Code:

class Solution {
    public int largestRectangleArea(int[] heights) {
    Stack<Integer> stack = new Stack<>();
    int maxArea = 0;
    int n = heights.length;
    for (int i = 0; i <= n; i++) {
        int h;
        if (i == n) {
            h = 0;
            } 
        else {
            h = heights[i];
        }
        while (!stack.isEmpty() && h < heights[stack.peek()]) {
            int height = heights[stack.pop()];
            int width;
            if (stack.isEmpty()) {
                width = i;
                }
            else {
                width = i - 1 - stack.peek();
            }
            maxArea = Math.max(maxArea, height * width);
        }
        stack.push(i);
    }
    return maxArea;
    }
}


Code:

class Solution {
    public int largestRectangleArea(int[] arr) {
        int n=arr.length;
        Stack<Integer>st=new Stack<>();
        Stack<Integer>s=new Stack<>();
        int le[]=new int[n];
        int re[]=new int[n];
        for(int i=0;i<n;i++){
            while(!st.isEmpty()&&arr[st.peek()]>=arr[i]){
                st.pop();
            }
            if(st.isEmpty()){
                le[i]=0;
            }
            else{
                le[i]=st.peek()+1;
            }
            st.push(i);
        }
        for(int i=n-1;i>=0;i--){
            while(!s.empty()&&arr[s.peek()]>=arr[i]){
                s.pop();
          }
          if(s.isEmpty()){
              re[i]=n;
          }
          else{
              re[i]=s.peek();
          }
          s.push(i);
        }
        int res[]=new int[n];
        for(int i=0;i<n;i++){
            res[i]=Math.abs(re[i]-le[i])*arr[i];
        }
        Arrays.sort(res);
        return res[n-1];
    }
}
