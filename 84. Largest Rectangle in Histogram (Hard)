# BRUTE FORCE APPROACH:
Code:

class Solution {
    public int largestRectangleArea(int[] heights) {
    int maxArea = 0;
    for (int i = 0; i < heights.length; i++) {
        int minHeight = Integer.MAX_VALUE;
        for (int j = i; j < heights.length; j++) {
            minHeight = Math.min(minHeight, heights[j]);
            maxArea = Math.max(maxArea, minHeight * (j - i + 1));
        }
    }
    return maxArea;
    }
}

# OPTIMAL APPROACH:
Code:

class Solution {
    public int largestRectangleArea(int[] heights) {
    Stack<Integer> stack = new Stack<>();
    int maxArea = 0;
    int n = heights.length;
    for (int i = 0; i <= n; i++) {
        int h;
        if (i == n) {
            h = 0;
            } 
        else {
            h = heights[i];
        }
        while (!stack.isEmpty() && h < heights[stack.peek()]) {
            int height = heights[stack.pop()];
            int width;
            if (stack.isEmpty()) {
                width = i;
                }
            else {
                width = i - 1 - stack.peek();
            }
            maxArea = Math.max(maxArea, height * width);
        }
        stack.push(i);
    }
    return maxArea;
    }
}
