Code:
// Approach 1:
class Solution {
    public int removeDuplicates(int[] nums) {
        int n = nums.length;
        int count = 0;
        for(int i=1; i<n; i++){
            if(nums[count] != nums[i]){
                count++;
                nums[count] = nums[i];
            }
        }
        return count+1;
    }
}

//Approach 2:
// class Solution {
//     public int removeDuplicates(int[] nums) {
//         int n = nums.length;
//         int count = 1;
//         for(int i=1; i<n; i++){
//             if(nums[i] > nums[i-1]){
//                 nums[count] = nums[i];
//                 count++;
//             }
//         }
//         return count;
//     }
// }

// Approach 3:
// class Solution {
//     public int removeDuplicates(int[] nums) {
//         int count = 0;
//         for(int i=0; i<nums.length; i++){
//             if(nums[count] != nums[i]){
//                 nums[++count] = nums[i];
//             }
//         }
//         return count+1;
//     }
// }

Complexity
Time complexity: O(n)
